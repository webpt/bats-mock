#!/usr/bin/env bash
set -e

status=0
program="${0##*/}"
prefix="_$(echo -n "$program" | tr -cs [:alnum:] _ | tr [:lower:] [:upper:])"

_STUB_PLAN="${prefix}_STUB_PLAN"
_STUB_RUN="${prefix}_STUB_RUN"
_STUB_INDEX="${prefix}_STUB_INDEX"
_STUB_RESULT="${prefix}_STUB_RESULT"
_STUB_END="${prefix}_STUB_END"
_STUB_DEBUG="${prefix}_STUB_DEBUG"

if [ -n "${!_STUB_DEBUG}" ]; then
  echo "$program" "$@" >&${!_STUB_DEBUG}
fi

[ -e "${!_STUB_PLAN}" ] || exit 1
[ -n "${!_STUB_RUN}" ] || eval "${_STUB_RUN}"="${BATS_MOCK_TMPDIR}/${program}-stub-run"


# Initialize or load the stub run information.
eval "${_STUB_INDEX}"=1
eval "${_STUB_RESULT}"=0
[ ! -e "${!_STUB_RUN}" ] || source "${!_STUB_RUN}"


# Loop over each line in the plan.
index=0
while IFS= read -r line; do
  index=$(($index + 1))

  if [ -z "${!_STUB_END}" ] && [ $index -eq "${!_STUB_INDEX}" ]; then
    # Split the line into an array of arguments to
    # match and a command to run to produce output.
    cmd=":"
    patterns="$line"
    if [ "$patterns" != "${patterns/ : }" ]; then
      cmd="${patterns#* : }"
      patterns="${patterns%% : *}"
    fi

    # No splitting required, just let pattern be a glob matching args (or not)
    case "$*" in
      $patterns ) result=0 ;;
      * ) result=1 ;;
    esac

    # If the arguments matched, evaluate the command
    # in a subshell. Otherwise, log the failure.
    if [ $result -eq 0 ] ; then
      set +e
      ( eval "$cmd" )
      status="$?"
      set -e
    else
      echo "Unexpected call to $program: Call $index arguments don't match." >&2
      echo "Expected: $patterns" >&2
      echo "Actual  : $*" >&2
      eval "${_STUB_RESULT}"=1
      status=1
    fi
  fi
done < "${!_STUB_PLAN}"


if [ -n "${!_STUB_END}" ]; then
  # Clean up the run file.
  rm -f "${!_STUB_RUN}"

  # If the number of lines in the plan is larger than
  # the requested index, we failed.
  if [ $index -ge "${!_STUB_INDEX}" ]; then
    echo "$program stub plan failed.  Expected $index calls, saw $((${!_STUB_INDEX} - 1))" >&2
    eval "${_STUB_RESULT}"=1
  fi

  # Return the result.
  exit "${!_STUB_RESULT}"

else
  # If the requested index is larger than the number
  # of lines in the plan file, we failed.
  if [ "${!_STUB_INDEX}" -gt $index ]; then
    echo "$program stub plan failed.  Expected $((index - 1)) calls, saw ${!_STUB_INDEX}" >&2
    eval "${_STUB_RESULT}"=1
  fi

  # Write out the run information.
  { echo "${_STUB_INDEX}=$((${!_STUB_INDEX} + 1))"
    echo "${_STUB_RESULT}=${!_STUB_RESULT}"
  } > "${!_STUB_RUN}"

  exit "$status"

fi
